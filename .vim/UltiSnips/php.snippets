global !p
import px.php
endglobal

snippet fe "foreach" bw
`!p

if t[1][-3:] == 'ies':
	value_var = t[1][:-3] + 'y'
elif t[1][-1:] == 's':
	value_var = t[1][:-1]
else:
	value_var = t[2]
`foreach(${1:`!p snip.rv=px.php.get_last_var_for_snippet()`} as ${2:`!p snip.rv=value_var`}) {
	$3
}
endsnippet

snippet le "log exception" bw
$this->_di->getLogger()->exception(`!p snip.rv=px.php.get_last_var_for_snippet()`);
endsnippet

snippet vd "variable declaration" bw
${1:`!p snip.rv=px.php.get_last_var_for_snippet()`} = $2
endsnippet

snippet vdt "variable declaration" bw
${1:`!p snip.rv=px.php.get_last_var_for_snippet()`} = $this->$2
endsnippet

snippet dv "variable declaration" bw
$1 = ${2:`!p snip.rv=px.php.get_last_var_for_snippet()`}
endsnippet

snippet tdv "variable declaration" bw
$this->$1 = ${2:`!p snip.rv=px.php.get_last_var_for_snippet()`}
endsnippet

snippet ine "if not empty" !w
if(!empty(${1:`!p snip.rv=px.php.get_last_var_for_snippet()`})) {
	$2
}
endsnippet

snippet ie "if empty" !w
if(empty(${1:`!p snip.rv=px.php.get_last_var_for_snippet()`})) {
	$2
}
endsnippet

snippet "* c" "phpdoc for class" b
`!p
import subprocess;
import vim;

_fp = vim.eval('expand("%p")').split('/')
_category = _fp[0]
_package = '_'.join(_fp[:2])

_name = subprocess.check_output(["git", "config", "user.name"]).strip()
_email = subprocess.check_output(["git", "config", "user.email"]).strip()
_author = _name + " <" + _email + ">"

`* @category `!p snip.rv=_category`
* @package `!p snip.rv=_package`
* @author `!p snip.rv=_author`
endsnippet

## my snippets

snippet ia "if array key" !b
if(${1:`!p snip.rv=px.php.get_last_var_for_snippet()`}['$2']$3) {
	$4
}
endsnippet

snippet un "unset"
unset(${0:`!p snip.rv=px.php.get_last_var_for_snippet()`});
endsnippet

snippet c "class"
class $1
{
	$0
}
endsnippet

snippet n " = null" b
 = null$0
endsnippet

snippet /d "<?php var_dump"
<?php var_dump(${0:`!p snip.rv=px.php.get_last_var_for_snippet()`}) ?>
endsnippet

snippet "(protected \$([\w.]+).*ps)" "protected setter" rm
`!p
_line = match.group(1)[:-2]
_cid = px.php.get_camelcase_identifier_from_string(_line, False)
_id = px.php.get_identifier_from_string(_line, False)
_phpdoc = px.php.get_phpdoc_variables_before_cursor()
_var = ''
if 'var' in _phpdoc:
	_var = _phpdoc['var']
snip.rv=_line`$0


/**
 * $1
 *
 * @param ${2:`!p snip.rv=_var`} $$3
 * @return $this
 */
protected function _set`!p snip.rv=_cid`($$3)
{
    $this->`!p snip.rv=_id` = $$3;

    return $this;
}
endsnippet

snippet "((protected|public|private) \$([\w.]+).*pg)" "protected getter" rm
`!p
_line = match.group(1)[:-2]
_cid = px.php.get_camelcase_identifier_from_string(_line, False)
_id = px.php.get_identifier_from_string(_line, False)
_phpdoc = px.php.get_phpdoc_variables_before_cursor()
_var = ''
if 'var' in _phpdoc:
	_var = _phpdoc['var']
snip.rv=_line`$0


/**
 * $1
 *
 * @return ${2:`!p snip.rv=_var`}
 */
protected function _get`!p snip.rv=_cid`()
{
    return $this->`!p snip.rv=_id`;
}
endsnippet

snippet "((protected|public|private) \$([\w.]+).*vs)" "private setter" rm
`!p
_line = match.group(1)[:-2]
_cid = px.php.get_camelcase_identifier_from_string(_line, False)
_id = px.php.get_identifier_from_string(_line, False)
_phpdoc = px.php.get_phpdoc_variables_before_cursor()
_var = ''
if 'var' in _phpdoc:
	_var = _phpdoc['var']
snip.rv=_line`$0


/**
 * $1
 *
 * @param ${2:`!p snip.rv=_var`} $$3
 * @return $this
 */
private _set`!p snip.rv=_cid`($$3)
{
    $this->`!p snip.rv=_id` = $$3;

    return $this;
}
endsnippet

snippet "((protected|public|private) \$([\w.]+).*vg)" "private getter" rm
`!p
_line = match.group(1)[:-2]
_cid = px.php.get_camelcase_identifier_from_string(_line, False)
_id = px.php.get_identifier_from_string(_line, False)
_phpdoc = px.php.get_phpdoc_variables_before_cursor()
_var = ''
if 'var' in _phpdoc:
	_var = _phpdoc['var']
snip.rv=_line`$0


/**
 * $1
 *
 * @return ${2:`!p snip.rv=_var`}
 */
private _get`!p snip.rv=_cid`()
{
    return $this->`!p snip.rv=_id`;
}
endsnippet

snippet "((protected|public|private) \$([\w.]+).*us)" "public setter" rm
`!p
_line = match.group(1)[:-2]
_cid = px.php.get_camelcase_identifier_from_string(_line, False)
_id = px.php.get_identifier_from_string(_line, False)
_phpdoc = px.php.get_phpdoc_variables_before_cursor()
_var = ''
if 'var' in _phpdoc:
	_var = _phpdoc['var']
snip.rv=_line`$0


/**
 * $1
 *
 * @param ${2:`!p snip.rv=_var`} $$3
 * @return $this
 */
public function set`!p snip.rv=_cid`($$3)
{
    $this->`!p snip.rv=_id` = $$3;

    return $this;
}
endsnippet

snippet "((protected|public|private) \$([\w.]+).*ug)" "public getter" rm
`!p
_line = match.group(1)[:-2]
_cid = px.php.get_camelcase_identifier_from_string(_line, False)
_id = px.php.get_identifier_from_string(_line, False)
_phpdoc = px.php.get_phpdoc_variables_before_cursor()
_var = ''
if 'var' in _phpdoc:
	_var = _phpdoc['var']
snip.rv=_line`$0


/**
 * $1
 *
 * @return ${2:`!p snip.rv=_var`}
 */
public function get`!p snip.rv=_cid`()
{
    return $this->`!p snip.rv=_id`;
}
endsnippet

snippet "^(.*?class\s+[\w_]+)\s([\w+]+)" "expand extends" rm
`!p snip.rv=match.group(1) + " extends " + match.group(2)`
endsnippet

snippet /ine "if not empty"
<?php if(!empty(${1:`!p snip.rv=px.php.get_last_var_for_snippet()`})) : ?>
	$2
<?php endif ?>
endsnippet

snippet /fe "php in html foreach" bw
`!p

if t[1][-3:] == 'ies':
	value_var = t[1][:-3] + 'y'
elif t[1][-1:] == 's':
	value_var = t[1][:-1]
else:
	value_var = t[2]
`
<?php foreach(${1:`!p snip.rv=px.php.get_last_var_for_snippet()`} as ${2:`!p snip.rv=value_var`}) : ?>
	$3
<?php endforeach ?>
endsnippet

snippet /r "<?php require '' ?>"
<?php require '$1' ?>
endsnippet
