# base

snippet p "package" !b
package ${1:main}
endsnippet

snippet f "function" !b
func ${1:main}(${2:args}) $3 {
	$0
}
endsnippet

snippet gof "go anonymous func"
go func() {
	$1
}()
endsnippet

snippet st "struct" !b
type ${1:name} struct {
	$0
}
endsnippet

# types

snippet s "string"
string
endsnippet

snippet b "bool"
bool
endsnippet

snippet msi "map[string]interface{}"
map[string]interface{}
endsnippet

snippet in "interface{}"
interface{}
endsnippet

snippet ve "var err error"
var err error
endsnippet

snippet ts "type struct" !b
type ${1:name} struct {
	$0
}
endsnippet

snippet ti "type interface" !b
type ${1:name} interface {
	$0
}
endsnippet

snippet v "var" !b
var ${1:variable} ${2:type}
endsnippet

# iterators

snippet fl "loop for" !b
for {
	$1
}
endsnippet

snippet fi "times for" !b
for index := 0; index < ${1:iterations}; index++ {
	$2
}
endsnippet

# conditional

snippet sw "switch" !b
switch ${1:variable} {
case $2:
	$0
}
endsnippet

snippet swt "switch type" !b
switch ${1:variable}.(type) {
	$2
}
endsnippet

snippet c "case" !b
case $1:
	$2
endsnippet

# logging

snippet li "log.Info" !b
log.Info("%#v", $1)
endsnippet

snippet lf "log.Fatal" !b
log.Fatal($1)
endsnippet

snippet lfe "log.Fatal(err.Error())" !b
log.Fatal(err.Error())
endsnippet

snippet ln "log.Notice" !b
log.Notice("%v", ${1:variable})
endsnippet

snippet lp "log.Printf()" !b
log.Printf("!!! %#v\n", $1)
endsnippet

snippet vl "var log"
var log = logging.MustGetLogger("$1")
endsnippet

# tricky ones

snippet tf "func (type)" !b
func (${1/.*([A-Z0-9]|\W)([a-z0-9]+([A-Z0-9]|$))/\l$1$2/} ${1:Type}) ${2:FuncName}($3)${4: }{
	$0
}
endsnippet

snippet sf "struct field with json notation"
${1:fieldName} ${2:fieldType} \`${3:json}:"${1/(.*)/\l$1/}"\`
endsnippet

# vim-pythonx powered

global !p
import go
endglobal

snippet i "if"
if ${1:`!p snip.rv=go.get_last_var_for_snippet()`} $2 {
	${3:${VISUAL}}
}
endsnippet

snippet r "return" !b
return ${1:`!p snip.rv=go.get_last_var_for_snippet()`}
endsnippet

snippet a "append"
append(${1:`!p snip.rv=go.get_last_var_for_snippet()`})
endsnippet

snippet fs "slice for" !b
for _, ${1:element} := range ${2:`!p snip.rv=go.get_last_var_for_snippet()`} {
	$3
}
endsnippet

# miscellaneous
snippet oe "os.Exit()"
os.Exit(${1:0})
endsnippet

snippet rn "return nil"
return nil
endsnippet

# errors handling

snippet ife "if err != nil"
if err != nil {
	return $1, err
}
endsnippet
