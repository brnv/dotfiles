global !p
import go
endglobal

snippet p "desc" !b
package ${1:main}
$0
endsnippet

snippet tf "func (type)" !b
func (${1/.*([A-Z0-9]|\W)([a-z0-9]+([A-Z0-9]|$))/\l$1$2/} ${1:Type}) ${2:FuncName}($3)${4: }{
	$0
}
endsnippet

snippet fr "for range" !b
for _, ${1:element} := range ${2:slice} {
	$0
}
endsnippet

snippet fi "for iteration" !b
for i := 0; i < ${1:iterations}; i++ {
	$0
}
endsnippet

snippet fl "for loop" !b
for {
	$0
}
endsnippet

snippet i "if" !b
if ${1:condition} {
	$0
}
endsnippet

snippet ie "if else" !b
if ${1:condition} {
	$2
} else {
	$0
}
endsnippet

snippet e "if err != nil" !b
if err != nil {
	${1:return err}
}
$0
endsnippet

snippet li "log.Info" !b
log.Info("%#v", $0)
endsnippet

snippet lf "log.Fatal" !b
log.Fatal($0)
endsnippet

snippet ln "log.Notice" !b
log.Notice("%v", ${0:variable})
endsnippet

snippet st "struct" !b
type ${1:name} struct {
	$0
}
endsnippet

snippet f "function" !b
func ${1:name}(${2:args}) ${3: }{
	$0
}
endsnippet

snippet r "return" !b
return $0
endsnippet

snippet sw "switch" !b
switch ${1:variable} {
case $2:
	$0
}
endsnippet

snippet swt "switch type" !b
switch ${1:variable}.(type) {
case $2:
	$0
}
endsnippet

snippet s "string"
string
endsnippet

snippet dbg "log.Printf()" !b
log.Printf("!!! %#v\n", $0)
endsnippet

snippet vl "var log"
var log = logging.MustGetLogger("$0")
endsnippet

snippet msi "map[string]interface{}"
map[string]interface{}
endsnippet
