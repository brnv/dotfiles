snippet ra "return" bw
return [$1];
endsnippet

snippet rt "return true" bw
return true;
endsnippet

snippet rf "return false" bw
return false;
endsnippet

snippet rn "return null" bw
return null;
endsnippet

snippet n "New class instance" b
$1 = new $2($3);
endsnippet

snippet td "$this->_di->get" bw
$this->_di->get$1()${2:->}
endsnippet

snippet pr "log debug" bw
$this->_di->getLogger()->debug($1);
endsnippet

snippet ld "log debug" bw
$this->_di->getLogger()->debug("$1");
endsnippet

snippet lrn "log notice" bw
$this->_di->getLogger()->notice("$1");
endsnippet

snippet lr "log error" bw
$this->_di->getLogger()->error("$1");
endsnippet

snippet li "log info" bw
$this->_di->getLogger()->info("$1");
endsnippet

snippet ei "elseif" iw
 elseif ($1) {
	$2
}
endsnippet

snippet el "else" iw
 else {
	$1
}
endsnippet

snippet uf "public function" bw
/**
 * $3
 *
 * $4
 */
public function $1($2)
{
	${5:${VISUAL}}
}
endsnippet

snippet vf "private function" bw
/**
 * $3
 *
 * $4
 */
private function _$1($2)
{
	${5:${VISUAL}}
}
endsnippet

snippet prf "protected function" bw
protected function _$1($2)
{
	${5:${VISUAL}}
}
endsnippet

snippet u "public variable" bw
public $$1;
endsnippet

snippet u= "public variable with variable" bw
public $$1 = $2;
endsnippet

snippet v "private variable" bw
private $_$1;
endsnippet

snippet v= "private variable with variable" bw
private $_$1 = $2;
endsnippet

snippet p "protected variable" bw
/**
 * $2
 *
 * @var $3
 */
protected $_$1;
endsnippet

snippet p= "protected variable with variable" bw
/**
 * $3
 *
 * @var $4
 */
protected $_$1 = $2;
endsnippet

snippet ar "array" w
array($0)
endsnippet

snippet em "empty" !w
empty($0)
endsnippet

snippet is "isset" !w
isset($0)
endsnippet

snippet te "throw exception" bw
throw new $1($2);
endsnippet

snippet try "try catch" bw
try {
	${1:${VISUAL}}
} catch ($2 $e) {
	${3:te }
}
endsnippet

snippet l "error_log" w
error_log(print_r([$1], true));
endsnippet

snippet lv "error_log variable" w
error_log(print_r(['$1' => $1], true));
endsnippet

snippet fr "for"
for($i = 0; $i < $1; $i++) {

}
endsnippet

snippet f "public function"
public function $1($2)
{
	$0
}
endsnippet

snippet psf "public static function"
public static function $1($2)
{
	$0
}
endsnippet

snippet pm "public member"
public $${1:name} = $0;
endsnippet

snippet prm "protected member"
protected $_${1:name} = $0;
endsnippet

snippet ar "$array"
$${1:array} = [
	$2
];
endsnippet

snippet / "<?php"
<?php $0 ?>
endsnippet

snippet /f "for"
<?php for($$1 as $$2) : ?>
	$3
<?php endfor ?>
endsnippet

snippet /i "if"
<?php if($1) : ?>
	$2
<?php endif ?>
endsnippet

snippet /ie "if empty"
<?php if(empty($1)) : ?>
	$2
<?php endif ?>
endsnippet

snippet he "else"
<?php else : ?>
$1
endsnippet

snippet hei "endif"
<?php endif ?>
endsnippet

snippet G "$_GET" i
$_GET['$0']
endsnippet

snippet /c "comment block"
<?php /*
${0:${VISUAL}}
*/ ?>
endsnippet

snippet /td "<?php //@TODO"
<?php //@TODO: $0 ?>
endsnippet

snippet /n "<br/>"
<br/>
endsnippet

snippet ne "not empty" i
!empty($$1) 
endsnippet

snippet doc "php doc"
/**
 * $1
 *
 * @param  ${2:type} ${3:name} ${4:description}
 ${5:* @throws ${6\Exception}}
 ${7:* @return $8}
 */
endsnippet

snippet hif ""
<input name="$1" type="file" ${2:multiple}>
endsnippet
